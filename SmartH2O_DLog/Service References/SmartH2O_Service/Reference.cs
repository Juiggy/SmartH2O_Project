//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SmartH2O_DLog.SmartH2O_Service {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeType", Namespace="http://schemas.datacontract.org/2004/07/SmartH2O_Service")]
    [System.SerializableAttribute()]
    public partial class CompositeType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool BoolValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StringValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BoolValue {
            get {
                return this.BoolValueField;
            }
            set {
                if ((this.BoolValueField.Equals(value) != true)) {
                    this.BoolValueField = value;
                    this.RaisePropertyChanged("BoolValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StringValue {
            get {
                return this.StringValueField;
            }
            set {
                if ((object.ReferenceEquals(this.StringValueField, value) != true)) {
                    this.StringValueField = value;
                    this.RaisePropertyChanged("StringValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SmartH2O_Service.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        SmartH2O_DLog.SmartH2O_Service.CompositeType GetDataUsingDataContract(SmartH2O_DLog.SmartH2O_Service.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<SmartH2O_DLog.SmartH2O_Service.CompositeType> GetDataUsingDataContractAsync(SmartH2O_DLog.SmartH2O_Service.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/WriteDataSensor", ReplyAction="http://tempuri.org/IService1/WriteDataSensorResponse")]
        string WriteDataSensor(string strMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/WriteDataSensor", ReplyAction="http://tempuri.org/IService1/WriteDataSensorResponse")]
        System.Threading.Tasks.Task<string> WriteDataSensorAsync(string strMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/WriteDataAlarm", ReplyAction="http://tempuri.org/IService1/WriteDataAlarmResponse")]
        string WriteDataAlarm(string strMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/WriteDataAlarm", ReplyAction="http://tempuri.org/IService1/WriteDataAlarmResponse")]
        System.Threading.Tasks.Task<string> WriteDataAlarmAsync(string strMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getDataAlarmXML", ReplyAction="http://tempuri.org/IService1/getDataAlarmXMLResponse")]
        string getDataAlarmXML();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getDataAlarmXML", ReplyAction="http://tempuri.org/IService1/getDataAlarmXMLResponse")]
        System.Threading.Tasks.Task<string> getDataAlarmXMLAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getDataSensorXML", ReplyAction="http://tempuri.org/IService1/getDataSensorXMLResponse")]
        string getDataSensorXML();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getDataSensorXML", ReplyAction="http://tempuri.org/IService1/getDataSensorXMLResponse")]
        System.Threading.Tasks.Task<string> getDataSensorXMLAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getParameterMinRangeDay", ReplyAction="http://tempuri.org/IService1/getParameterMinRangeDayResponse")]
        string[] getParameterMinRangeDay(string parameter, string dateBg, string dateEd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getParameterMinRangeDay", ReplyAction="http://tempuri.org/IService1/getParameterMinRangeDayResponse")]
        System.Threading.Tasks.Task<string[]> getParameterMinRangeDayAsync(string parameter, string dateBg, string dateEd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getParameterMaxRangeDay", ReplyAction="http://tempuri.org/IService1/getParameterMaxRangeDayResponse")]
        string[] getParameterMaxRangeDay(string parameter, string dateBg, string dateEd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getParameterMaxRangeDay", ReplyAction="http://tempuri.org/IService1/getParameterMaxRangeDayResponse")]
        System.Threading.Tasks.Task<string[]> getParameterMaxRangeDayAsync(string parameter, string dateBg, string dateEd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getParameterAvgRangeDay", ReplyAction="http://tempuri.org/IService1/getParameterAvgRangeDayResponse")]
        string[] getParameterAvgRangeDay(string parameter, string dateBg, string dateEd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getParameterAvgRangeDay", ReplyAction="http://tempuri.org/IService1/getParameterAvgRangeDayResponse")]
        System.Threading.Tasks.Task<string[]> getParameterAvgRangeDayAsync(string parameter, string dateBg, string dateEd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getParameterMinHourInDay", ReplyAction="http://tempuri.org/IService1/getParameterMinHourInDayResponse")]
        string[] getParameterMinHourInDay(string parameter, string day);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getParameterMinHourInDay", ReplyAction="http://tempuri.org/IService1/getParameterMinHourInDayResponse")]
        System.Threading.Tasks.Task<string[]> getParameterMinHourInDayAsync(string parameter, string day);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getParameterMaxHourInDay", ReplyAction="http://tempuri.org/IService1/getParameterMaxHourInDayResponse")]
        string[] getParameterMaxHourInDay(string parameter, string day);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getParameterMaxHourInDay", ReplyAction="http://tempuri.org/IService1/getParameterMaxHourInDayResponse")]
        System.Threading.Tasks.Task<string[]> getParameterMaxHourInDayAsync(string parameter, string day);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getParameterAvgHourInDay", ReplyAction="http://tempuri.org/IService1/getParameterAvgHourInDayResponse")]
        string[] getParameterAvgHourInDay(string parameter, string day);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getParameterAvgHourInDay", ReplyAction="http://tempuri.org/IService1/getParameterAvgHourInDayResponse")]
        System.Threading.Tasks.Task<string[]> getParameterAvgHourInDayAsync(string parameter, string day);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getParameterMinWeekly", ReplyAction="http://tempuri.org/IService1/getParameterMinWeeklyResponse")]
        string[] getParameterMinWeekly(string parameter, int week);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getParameterMinWeekly", ReplyAction="http://tempuri.org/IService1/getParameterMinWeeklyResponse")]
        System.Threading.Tasks.Task<string[]> getParameterMinWeeklyAsync(string parameter, int week);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getParameterMaxWeekly", ReplyAction="http://tempuri.org/IService1/getParameterMaxWeeklyResponse")]
        string[] getParameterMaxWeekly(string parameter, int week);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getParameterMaxWeekly", ReplyAction="http://tempuri.org/IService1/getParameterMaxWeeklyResponse")]
        System.Threading.Tasks.Task<string[]> getParameterMaxWeeklyAsync(string parameter, int week);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getParameterAvgWeekly", ReplyAction="http://tempuri.org/IService1/getParameterAvgWeeklyResponse")]
        string[] getParameterAvgWeekly(string parameter, int week);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getParameterAvgWeekly", ReplyAction="http://tempuri.org/IService1/getParameterAvgWeeklyResponse")]
        System.Threading.Tasks.Task<string[]> getParameterAvgWeeklyAsync(string parameter, int week);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getAlarmRangeDay", ReplyAction="http://tempuri.org/IService1/getAlarmRangeDayResponse")]
        string[] getAlarmRangeDay(string[] parameters, string dateBg, string dateEd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getAlarmRangeDay", ReplyAction="http://tempuri.org/IService1/getAlarmRangeDayResponse")]
        System.Threading.Tasks.Task<string[]> getAlarmRangeDayAsync(string[] parameters, string dateBg, string dateEd);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : SmartH2O_DLog.SmartH2O_Service.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<SmartH2O_DLog.SmartH2O_Service.IService1>, SmartH2O_DLog.SmartH2O_Service.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public SmartH2O_DLog.SmartH2O_Service.CompositeType GetDataUsingDataContract(SmartH2O_DLog.SmartH2O_Service.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<SmartH2O_DLog.SmartH2O_Service.CompositeType> GetDataUsingDataContractAsync(SmartH2O_DLog.SmartH2O_Service.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
        
        public string WriteDataSensor(string strMsg) {
            return base.Channel.WriteDataSensor(strMsg);
        }
        
        public System.Threading.Tasks.Task<string> WriteDataSensorAsync(string strMsg) {
            return base.Channel.WriteDataSensorAsync(strMsg);
        }
        
        public string WriteDataAlarm(string strMsg) {
            return base.Channel.WriteDataAlarm(strMsg);
        }
        
        public System.Threading.Tasks.Task<string> WriteDataAlarmAsync(string strMsg) {
            return base.Channel.WriteDataAlarmAsync(strMsg);
        }
        
        public string getDataAlarmXML() {
            return base.Channel.getDataAlarmXML();
        }
        
        public System.Threading.Tasks.Task<string> getDataAlarmXMLAsync() {
            return base.Channel.getDataAlarmXMLAsync();
        }
        
        public string getDataSensorXML() {
            return base.Channel.getDataSensorXML();
        }
        
        public System.Threading.Tasks.Task<string> getDataSensorXMLAsync() {
            return base.Channel.getDataSensorXMLAsync();
        }
        
        public string[] getParameterMinRangeDay(string parameter, string dateBg, string dateEd) {
            return base.Channel.getParameterMinRangeDay(parameter, dateBg, dateEd);
        }
        
        public System.Threading.Tasks.Task<string[]> getParameterMinRangeDayAsync(string parameter, string dateBg, string dateEd) {
            return base.Channel.getParameterMinRangeDayAsync(parameter, dateBg, dateEd);
        }
        
        public string[] getParameterMaxRangeDay(string parameter, string dateBg, string dateEd) {
            return base.Channel.getParameterMaxRangeDay(parameter, dateBg, dateEd);
        }
        
        public System.Threading.Tasks.Task<string[]> getParameterMaxRangeDayAsync(string parameter, string dateBg, string dateEd) {
            return base.Channel.getParameterMaxRangeDayAsync(parameter, dateBg, dateEd);
        }
        
        public string[] getParameterAvgRangeDay(string parameter, string dateBg, string dateEd) {
            return base.Channel.getParameterAvgRangeDay(parameter, dateBg, dateEd);
        }
        
        public System.Threading.Tasks.Task<string[]> getParameterAvgRangeDayAsync(string parameter, string dateBg, string dateEd) {
            return base.Channel.getParameterAvgRangeDayAsync(parameter, dateBg, dateEd);
        }
        
        public string[] getParameterMinHourInDay(string parameter, string day) {
            return base.Channel.getParameterMinHourInDay(parameter, day);
        }
        
        public System.Threading.Tasks.Task<string[]> getParameterMinHourInDayAsync(string parameter, string day) {
            return base.Channel.getParameterMinHourInDayAsync(parameter, day);
        }
        
        public string[] getParameterMaxHourInDay(string parameter, string day) {
            return base.Channel.getParameterMaxHourInDay(parameter, day);
        }
        
        public System.Threading.Tasks.Task<string[]> getParameterMaxHourInDayAsync(string parameter, string day) {
            return base.Channel.getParameterMaxHourInDayAsync(parameter, day);
        }
        
        public string[] getParameterAvgHourInDay(string parameter, string day) {
            return base.Channel.getParameterAvgHourInDay(parameter, day);
        }
        
        public System.Threading.Tasks.Task<string[]> getParameterAvgHourInDayAsync(string parameter, string day) {
            return base.Channel.getParameterAvgHourInDayAsync(parameter, day);
        }
        
        public string[] getParameterMinWeekly(string parameter, int week) {
            return base.Channel.getParameterMinWeekly(parameter, week);
        }
        
        public System.Threading.Tasks.Task<string[]> getParameterMinWeeklyAsync(string parameter, int week) {
            return base.Channel.getParameterMinWeeklyAsync(parameter, week);
        }
        
        public string[] getParameterMaxWeekly(string parameter, int week) {
            return base.Channel.getParameterMaxWeekly(parameter, week);
        }
        
        public System.Threading.Tasks.Task<string[]> getParameterMaxWeeklyAsync(string parameter, int week) {
            return base.Channel.getParameterMaxWeeklyAsync(parameter, week);
        }
        
        public string[] getParameterAvgWeekly(string parameter, int week) {
            return base.Channel.getParameterAvgWeekly(parameter, week);
        }
        
        public System.Threading.Tasks.Task<string[]> getParameterAvgWeeklyAsync(string parameter, int week) {
            return base.Channel.getParameterAvgWeeklyAsync(parameter, week);
        }
        
        public string[] getAlarmRangeDay(string[] parameters, string dateBg, string dateEd) {
            return base.Channel.getAlarmRangeDay(parameters, dateBg, dateEd);
        }
        
        public System.Threading.Tasks.Task<string[]> getAlarmRangeDayAsync(string[] parameters, string dateBg, string dateEd) {
            return base.Channel.getAlarmRangeDayAsync(parameters, dateBg, dateEd);
        }
    }
}
